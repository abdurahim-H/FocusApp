diff --git a/js/timer.js b/js/timer.js
index 05acae1..371a85d 100644
--- a/js/timer.js
+++ b/js/timer.js
@@ -1,3 +1,9 @@
+/**
+ * Timer Management System
+ * Handles pomodoro timer functionality, session    updateSessionDisplay();
+
+    state.timer.interval = trackSetInterval(() => {nsitions, achievements, and UI updates
+ */
 import { state } from './state.js';
 import { triggerFocusIntensification } from './blackhole.js';
 import { triggerFocusZoom, triggerSessionCompleteZoom, approachBlackHole } from './camera-effects.js';
@@ -13,35 +19,29 @@ export function updateTimerDisplay() {
     }
 }
 
-// Update session counter display
 export function updateSessionDisplay() {
     const pomodoroCountElement = document.getElementById('pomodoroCount');
     const pomodoroTotalElement = document.getElementById('pomodoroTotal');
     
     if (pomodoroCountElement) {
-        // Show current session number (1-based)
         let currentSession = state.timer.isBreak 
-            ? state.timer.pomodoroCount  // If on break, we've completed this many sessions
-            : state.timer.pomodoroCount + 1;  // If focusing, we're working on the next session
+            ? state.timer.pomodoroCount
+            : state.timer.pomodoroCount + 1;
         
-        // Ensure we never display more than 4 sessions
         currentSession = Math.min(currentSession, 4);
-        
         pomodoroCountElement.textContent = currentSession;
     }
     
     if (pomodoroTotalElement) {
-        pomodoroTotalElement.textContent = '4';  // Standard pomodoro cycle is 4 sessions
+        pomodoroTotalElement.textContent = '4';
     }
 }
 
 export function startTimer() {
-    // Prevent starting if already running or in transition
     if (state.timer.isRunning || state.timer.transitioning) {
         return;
     }
     
-    // Clear any existing interval first
     if (state.timer.interval) {
         clearInterval(state.timer.interval);
         state.timer.interval = null;
@@ -50,9 +50,8 @@ export function startTimer() {
     state.timer.isRunning = true;
     state.timer.transitioning = false;
     state.timerState = 'running';
-    // Fix: Keep both state properties in sync
     state.currentMode = state.timer.isBreak ? 'break' : 'focus';
-    state.mode = 'timer'; // Ensure navigation knows we're in timer mode
+    state.mode = 'timer';
 
     const startBtn = document.getElementById('startBtn');
     const pauseBtn = document.getElementById('pauseBtn');
