// Test script to verify ambient mode functionality
// Run this in browser console on the main page

console.log('üéµ Testing Ambient Mode Functionality...');

// Test 1: Check if audio system is initialized
function testAudioInitialization() {
    console.log('\n1Ô∏è‚É£ Testing Audio Initialization...');
    
    if (window.loadedModules?.sounds?.initAudioSystem) {
        console.log('‚úÖ initAudioSystem function available');
        return window.loadedModules.sounds.initAudioSystem();
    } else {
        console.log('‚ùå initAudioSystem function not found');
        return false;
    }
}

// Test 2: Check ambient buttons functionality
function testAmbientButtons() {
    console.log('\n2Ô∏è‚É£ Testing Ambient Buttons...');
    
    const buttons = ['rainBtn', 'oceanBtn', 'forestBtn', 'cafeBtn'];
    const results = {};
    
    buttons.forEach(btnId => {
        const btn = document.getElementById(btnId);
        if (btn) {
            results[btnId] = {
                exists: true,
                hasEventListener: btn.onclick !== null || btn.addEventListener !== undefined
            };
            console.log(`‚úÖ ${btnId} button found`);
        } else {
            results[btnId] = { exists: false };
            console.log(`‚ùå ${btnId} button not found`);
        }
    });
    
    return results;
}

// Test 3: Test sound delay by measuring click-to-audio time
async function testSoundDelay(soundType = 'rain') {
    console.log(`\n3Ô∏è‚É£ Testing Sound Delay for ${soundType}...`);
    
    const startTime = performance.now();
    
    try {
        if (window.loadedModules?.sounds?.toggleAmbientSound) {
            await window.loadedModules.sounds.toggleAmbientSound(soundType);
            const endTime = performance.now();
            const delay = Math.round(endTime - startTime);
            
            console.log(`‚è±Ô∏è Sound activation delay: ${delay}ms`);
            
            if (delay < 100) {
                console.log('üöÄ Excellent! Very fast response');
            } else if (delay < 500) {
                console.log('‚ö° Good response time');
            } else {
                console.log('üêå Slow response - may need optimization');
            }
            
            return delay;
        } else {
            console.log('‚ùå toggleAmbientSound function not available');
            return null;
        }
    } catch (error) {
        console.log(`‚ùå Error testing sound delay: ${error.message}`);
        return null;
    }
}

// Test 4: Check state management
function testStateManagement() {
    console.log('\n4Ô∏è‚É£ Testing State Management...');
    
    if (window.loadedModules?.state) {
        const state = window.loadedModules.state.state;
        console.log('üìä Current state:', state);
        
        if (state.sounds) {
            console.log('‚úÖ Sound state exists');
            console.log('üîä Active sounds:', state.sounds.active);
            console.log('üíæ Loaded buffers:', Object.keys(state.sounds.buffers || {}));
            console.log('üéõÔ∏è Sound sources:', Object.keys(state.sounds.sources || {}));
        } else {
            console.log('‚ùå Sound state not found');
        }
        
        return state;
    } else {
        console.log('‚ùå State module not available');
        return null;
    }
}

// Run all tests
async function runAllTests() {
    console.log('üéØ Running Complete Ambient Mode Test Suite...');
    console.log('=' .repeat(50));
    
    try {
        // Test 1: Audio initialization
        const initResult = await testAudioInitialization();
        
        // Wait a moment for initialization
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Test 2: Button functionality
        const buttonResults = testAmbientButtons();
        
        // Test 3: Sound delay
        const delayResult = await testSoundDelay('rain');
        
        // Test 4: State management
        const stateResult = testStateManagement();
        
        // Summary
        console.log('\nüìã TEST SUMMARY:');
        console.log('=' .repeat(30));
        console.log(`üîß Audio Init: ${initResult ? '‚úÖ' : '‚ùå'}`);
        console.log(`üéõÔ∏è Buttons: ${Object.values(buttonResults).every(r => r.exists) ? '‚úÖ' : '‚ùå'}`);
        console.log(`‚ö° Sound Delay: ${delayResult ? (delayResult < 500 ? '‚úÖ' : '‚ö†Ô∏è') : '‚ùå'} ${delayResult ? delayResult + 'ms' : 'N/A'}`);
        console.log(`üìä State: ${stateResult ? '‚úÖ' : '‚ùå'}`);
        
        if (initResult && delayResult < 500) {
            console.log('\nüéâ SOUND DELAY FIXES ARE WORKING! üéâ');
        } else {
            console.log('\n‚ö†Ô∏è Some issues detected - check individual test results above');
        }
        
    } catch (error) {
        console.log(`‚ùå Test suite error: ${error.message}`);
    }
}

// Auto-run tests if page is loaded
if (document.readyState === 'complete') {
    runAllTests();
} else {
    window.addEventListener('load', runAllTests);
}

// Export functions for manual testing
window.ambientTests = {
    runAllTests,
    testAudioInitialization,
    testAmbientButtons,
    testSoundDelay,
    testStateManagement
};
